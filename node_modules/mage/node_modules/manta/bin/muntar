#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2013, Joyent, Inc. All rights reserved.

var fs = require('fs');
var url = require('url');

var mod_path = require('path');

var bunyan = require('bunyan');
var dashdash = require('dashdash');
var once = require('once');
var restify = require('restify');
var uuid = require('node-uuid');

var manta = require('../lib');

var http = require('http');
var https = require('https');
var tar = require('tar');

///--- Globals

var IN_PROGRESS = {};
var LOG = bunyan.createLogger({
    name: mod_path.basename(process.argv[1]),
    level: (process.env.LOG_LEVEL || 'info'),
    stream: process.stderr,
    serializers: restify.bunyan.serializers
});
var MAX_SOCKETS = parseInt(process.env.MANTA_MAX_SOCKETS || 1000, 10);

var OPTIONS_PARSER = dashdash.createParser({
    options: manta.DEFAULT_CLI_OPTIONS.concat([
        {
            names: ['copies', 'c'],
            type: 'positiveInteger',
            help: 'number of copies to make',
            helpArg: 'COPIES',
            'default': 2
        },
        {
            names: ['file', 'f'],
            type: 'string',
            help: 'local file to upload (required)',
            helpArg: 'FILE'
        },
        {
            names: ['header', 'H'],
            type: 'arrayOfString',
            help: 'HTTP headers to include',
            helpArg: 'HEADER'
        },
        {
            names: ['parallel', 'p'],
            type: 'positiveInteger',
            help: 'limit concurrent operations (default 20)',
            'default': 20,
            helpArg: 'CONCURRENCY'
        }
    ])
});



///--- Functions

function ifError(err) {
    if (err) {
        console.error('muntar: ' + err.toString());
        process.exit(1);
    }
}


function parseOptions() {
    var opts;

    try {
        opts = OPTIONS_PARSER.parse(process.argv);
        manta.checkBinEnv(opts);
    } catch (e) {
        manta.cli_usage(OPTIONS_PARSER, e.message, 'path');
    }

    manta.cli_logger(opts, LOG);

    if (opts.help)
        manta.cli_usage(OPTIONS_PARSER, false, 'path');

    if (!opts.file)
        manta.cli_usage(OPTIONS_PARSER, 'file is a required argument', 'path');

    if (opts._args.length < 1)
        manta.cli_usage(OPTIONS_PARSER, 'path required', 'path');

    opts.path = opts._args[0];

    opts.headers = {};
    (opts.header || []).forEach(function (h) {
        if (h.indexOf(':') === -1) {
            manta.cli_usage(OPTIONS_PARSER,
                            'header must be in the form of "[header]: value"',
                            'path...');
        }
        var tmp = h.split(':');
        opts.headers[tmp[0]] = tmp[1].trim();
    });

    return (opts);
}


function put(client, path, stream, opts, cb) {
    client.put(path, stream, opts, function (err) {
        if (!err || !err.body ||
            (err.body.code != 'ParentNotDirectory' &&
             err.body.code != 'DirectoryDoesNotExist')) {
            cb(err);
            return;
        }

        /*
         * Our put failed.  If the put failed because we were missing
         * a parent directory, we'll try to make the directory --
         * assuring that we don't have two outstanding requests to
         * make the same directory.
         */
        var dir = path.match(/.*\//)[0];

        function postmkdir(_err) {
            if (_err) {
                cb(_err);
                return;
            }

            client.put(path, stream, opts, cb);
        }

        if (IN_PROGRESS[dir]) {
            IN_PROGRESS[dir].push(postmkdir);
            return;
        }

        IN_PROGRESS[dir] = [ postmkdir ];

        client.mkdirp(dir, function (_err) {
            IN_PROGRESS[dir].forEach(function (post) {
                post.call(this, _err);
            });

            delete IN_PROGRESS[dir];
        });
    });
}


/*
 * Absent intermediate streams for each entry that could be paused without
 * pausing the tar parsing, each worker needs to take its own pass through
 * the tarball.
 */
function worker(client, tarball, callback) {
    var entry = 0;
    var inflight = 1;
    var stream = fs.createReadStream(tarball.file);
    var pipe = stream.pipe(tar.Parse());
    var options = tarball.options;

    callback = once(callback);

    function cb() {
        if (--inflight > 0)
            return;

        callback();
    }

    pipe.once('end', cb);
    pipe.on('entry', function (e) {
        if (e.props.size === 0)
            return;

        if (entry++ < tarball.next)
            return;

        tarball.next = entry;
        e.pause();

        var p = options.path + '/' + e.props.path;
        var o = {
            copies: options.copies,
            size: e.props.size
        };
        inflight++;
        put(client, p, e, o, function (err) {
            ifError(err);

            console.log(p);
            cb();
        });
    });
}



///--- Mainline

(function main() {
    var options = parseOptions();

    http.globalAgent.maxSockets = MAX_SOCKETS;
    https.globalAgent.maxSockets = MAX_SOCKETS;

    var client = manta.createBinClient(options);
    var done = 0;
    var tarball = {
        file: options.file,
        options: options,
        next: 0
    };

    function cb() {
        if (++done === options.parallel)
            client.close();
    }

    for (var i = 0; i < options.parallel; i++)
        worker(client, tarball, cb);
})();
