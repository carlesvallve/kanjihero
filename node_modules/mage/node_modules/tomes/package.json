{
  "name": "tomes",
  "description": "Evented Storage Agnostic Data API",
  "version": "0.0.18",
  "author": {
    "name": "Wizcorp, Inc.",
    "email": "info@wizcorp.jp"
  },
  "maintainers": [
    {
      "name": "Bjorn Stromberg",
      "email": "bstromberg@wizcorp.jp"
    }
  ],
  "scripts": {
    "test": "node test"
  },
  "main": "index.js",
  "devDependencies": {
    "nodeunit": "*",
    "rumplestiltskin": "*",
    "jshint": "*"
  },
  "license": {
    "type": "MIT",
    "url": "https://github.com/Wizcorp/node-tomes/raw/master/LICENSE"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Wizcorp/node-tomes.git"
  },
  "bugs": {
    "url": "http://github.com/Wizcorp/node-tomes/issues"
  },
  "readme": "[![Build Status](https://travis-ci.org/Wizcorp/node-tomes.png)](https://travis-ci.org/Wizcorp/node-tomes)\n\nTomes\n=====\n\n*Evented Storage Agnostic Data API*\n\n![Tomes Logo](https://raw.github.com/bjornstar/tomes/master/logo/tomes-logo-small.png)\n\nProblem: You've got data and you want to do something whenever it changes.\n\nAccess and modify your data through the Tomes API and you'll get change events.\n\nPlay with a live demo here - http://bjornstar.github.com/tomes/\n\nExample\n=======\n```javascript\nvar filmData = {\n\tcast: [\n\t\t{ name: \"Mr. Blonde\", guns: 1, razors: 1 },\n\t\t{ name: \"Marvin Nash\", ears: [ \"left\", \"right\" ], cop: true },\n\t]\n};\n\nvar reservoirDogs = Tome.conjure(filmData);\n\nreservoirDogs.cast[1].on('readable', function (marvinNash) {\n\tconsole.log(marvinNash.ears.length);\n});\n// >>> 2\n\nreservoirDogs.cast[1].ears.pop();\n// >>> 1\n```\n\nTomes API\n=========\n\n##Tome\n\n###Tome.conjure( *data* )\nReturns a new Tome containing your data.\n\n###Tome.typeOf( *data* )\nReturns data's type as a string. Tomes has types that exist in JSON which are:\n - array\n - boolean\n - null\n - number\n - object\n - string\nAs well as:\n - undefined\n\n###Tome.isTome( *data* )\nReturns a boolean indicating whether data is a Tome or not.\n\n###Tome.unTome( *tome* )\nReturns a regular JavaScript version of your Tome.\n\n##TomeTypes\n - ArrayTome\n - BooleanTome\n - NullTome\n - NumberTome\n - ObjectTome\n - StringTome\n - UndefinedTome\n\n###Tome.destroy( *tome* )\nMake a tome and all of it's sub-tomes emit destroy. This will not delete anything.\n\n##Methods\n\n###assign( *data* )\nAssign data to a Tome.\n\n###set( *key*, *data* )\nAssign data to key on a Tome. Set will create a Tome on the key if it does not exist.\n\n###del( *key* )\nDelete a key from a Tome.\n\n###swap( *key*, *tome* )\nSwap key with tome.\n\n###rename( *key*, *newkey* )\nRename key to newkey.\n\n###move( *key*, *tome*, [ *newkey* ] )\nMove key to tome. Optionally call it newkey on that tome.\n\n###hide( [ *boolean* ] )\nHides a Tome. The Tome still exists in this tome, but will neither stringify nor show up in any events. Shows up as a delete in change operations.\n\n###read( )\nGet a single change operation from the root Tome, removing it in the process. Returns null if there are no changes.\n\n###readAll( )\nGet all change operations from the Tome\n\n###merge( *diff* )\nApplies a change operation or an array of change operations to a Tome.\n\n###getKey( )\nReturns a Tome's key.\n\n###getParent( )\nReturns a Tome's parent Tome.\n\n###getVersion( )\nReturns a Tome's version.\n\n###is( *value* )\nReturns a boolean value indicating whether or not the Tome is observably indistinguishable from value ([ref](http://wiki.ecmascript.org/doku.php?id=harmony:egal)). If no value is given, returns whether or not the Tome's value is truthy.\n\n###isDirty( )\nReturns whether a Tome has been changed, but the change has not been read.\n\n##Events\n\n###add( *key* )\nEmitted when a Tome receives a new key.\n\n###del( *key* )\nEmitted when a key is deleted from a Tome.\n\n###destroy( )\nEmitted when a Tome is deleted. Removes all event listeners for this Tome.\n\n###readable( *was* )\nEmitted every time a Tome or any of its child Tomes are altered. If the Tome was a primitive (ie. string, number, or boolean) the previous value will be emitted as well, but only if it did not change types.\n\n###typeChange( *tome*, *oldType*, *newType* )\nEmitted by the root tome when a Tome changes type.\n",
  "readmeFilename": "README.md",
  "_id": "tomes@0.0.18",
  "dist": {
    "shasum": "fcc2cf2475023a1f629108e9e32311b5121424ea"
  },
  "_from": "tomes@0.0.18",
  "_resolved": "https://registry.npmjs.org/tomes/-/tomes-0.0.18.tgz"
}
