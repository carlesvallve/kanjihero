{
  "name": "localcache",
  "description": "A fast, minimalistic in-memory key/value cache",
  "version": "0.1.4",
  "author": {
    "name": "Ron Korving",
    "email": "rkorving@wizcorp.jp"
  },
  "engines": {
    "node": ">=0.4.9"
  },
  "main": "index",
  "repository": {
    "type": "git",
    "url": "https://github.com/Wizcorp/node-localcache.git"
  },
  "readme": "# LocalCache\n\nLocalCache is a fast, minimalistic in-memory key/value cache, with support for expiration.\nIn essence, it's quite similar to other key/value stores like memcached, except that LocalCache\nonly keeps things in the current process's memory, and not in some external service.\nLocalCache has no external dependencies.\n\n## Why would I use this?\n\nSometimes you want to store some calculated, or externally retrieved values, because you know\nyou may need them again very soon. Nonetheless, you don't want to keep them around for too long.\nThat's where the ability to expire information comes in handy. LocalCache has its own garbage\ncollection mechanism for expiring old data. The main design considerations are a small\nperformance overhead, and a fast garbage collection mechanism.\n\n## API\n\nLocalCache exposes the following APIs:\n\n### new LocalCache([cycleInterval], [options])\n\n`cycleInterval` is the garbage collection cycle interval, in seconds. If you tend to store a lot\nof data, with short TTL values, it is recommended to use a relatively low interval. If data\ngenerally has a high TTL, you may want to raise the interval.\n\n`options` is an object for passing options to the cache. The following values are supported:\n\n`maxKeys` (integer, default: null). Can be set to limit the total amount of values that may be\nstored in the cache. If this value gets exceeded, the values that will expire soonest will be made\nto expire prematurely.\n\n`aggressiveExpiration` (boolean, default: false). If set to true, even if a get() call yields a value,\nand that value is expired (just not yet garbage collected), it will not be returned.\n\n### cache.flush()\n\nResets the entire cache to zero.\n\n### cache.diagnostics()\n\nReturns an object containing information about the state of the cache.\n\n### cache.add(key, value, [ttl], [touchIfExists])\n\nAdds a value to the cache, optionally expiring after `ttl` seconds. If a value with that key did not yet\nexist, it will be created and the new value will be returned. If a value did exist, it will not be\noverwritten, and instead that existing value will be returned. Also, if `touchIfExists` is true, the\nexisting value will get `ttl` as a new time-to-live.\n\n### cache.set(key, value, [ttl])\n\nAdds a value to the cache, optionally expiring after `ttl` seconds. If a value with that key already\nexists, it will be overwritten. For chainability, set() will return the value.\n\n### cache.touch(key, ttl)\n\nResets the value's expiration time to now + `ttl` seconds. The value that `key` holds will be returned.\n\n### cache.del(key)\n\nDeletes the value with key `key` from the cache. If the value existed, this deleted value will be returned.\nIf it did not exist, undefined will be returned.\n\n### cache.get(key, newTTL)\n\nReturns the value stored by key `key`. If it does not exist, undefined will be returned. If `newTTL` is\ndefined, the value will be \"touched\" with the new TTL.\n\n### cache.getExpirationTime(key)\n\nYields the time (unix timestamp in seconds) at which the value for key `key` will expire. if the value\nwill never expire, null is returned. If the value does not exist, undefined is returned.\n\n\n## Example\n\n``` javascript\nvar LocalCache = require('localcache').LocalCache;\n\n// instantiate\n\nvar options = {};\n\nvar cache = new LocalCache(60, options);\n\n// set key \"hello\" to value \"world\" and expire after 30 seconds.\n\ncache.set('hello', 'world', 30);\n\n// adding a key called \"hello\" will now fail and return the previous value \"world\".\n\ncache.add('hello', 'foo');\n\n// print \"hello world\"\n\nconsole.log('hello', cache.get('hello'));\n\n// extend expiration to 120 seconds after now\n\ncache.touch('hello', 120);\n\n// cleanup prematurely, because we can\n\ncache.del('hello');\n```\n\n## License\n\nLocalCache uses the MIT License.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Wizcorp/node-localcache/issues"
  },
  "_id": "localcache@0.1.4",
  "dist": {
    "shasum": "b5dce8bedefcd9b3b0b5ec818eb5e49882e818c7"
  },
  "_resolved": "git+https://github.com/Wizcorp/node-localcache.git#92ba50f7d4932c43cebe972e3458d6d671a1e4a4",
  "_from": "localcache@git+https://github.com/Wizcorp/node-localcache.git#v0.1.4"
}
