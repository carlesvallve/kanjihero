{
  "name": "simple-filter",
  "version": "0.0.3",
  "description": "A small wrapper around crossfilter to make querying simpler",
  "scripts": {
    "test": "./node_modules/.bin/mocha"
  },
  "author": {
    "name": "Wizcorp, Inc.",
    "email": "info@wizcorp.jp"
  },
  "maintainers": [
    {
      "name": "Christophe Robin",
      "email": "crobin@nekoo.com"
    }
  ],
  "license": {
    "type": "MIT",
    "url": "https://github.com/Wizcorp/filter-builder/raw/master/LICENSE"
  },
  "dependencies": {
    "crossfilter": "~1.3.5"
  },
  "devDependencies": {
    "assert": "~0.4.9",
    "mocha": "~1.14.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Wizcorp/simple-filter.git"
  },
  "bugs": {
    "url": "http://github.com/Wizcorp/simple-filter/issues"
  },
  "readme": "[![Build Status](https://travis-ci.org/christopherobin/simple-filter.png)](https://travis-ci.org/christopherobin/simple-filter)\n\n# simple-filter\n\n  A small wrapper around crossfilter to make querying simpler\n\n## Installation\n\n  Install with [component(1)](http://component.io):\n\n    $ component install Wizcorp/simple-filter\n\n## API\n\n### Create a crossfilter\n\n```javascript\nvar data = [{object}, {object}, etc...];\nvar indexes = {\n\tid: function (value) { return value.id }\n};\n\n// both values are optional\nvar filter = new Filter(data, indexes);\n```\n\n### addIndex(name, func)\n\nCreate an index `name` using function `func`.\n\n```javascript\n// create an index named name for the lowercase value of the name\nfilter.addIndex('name', function (value) { return value.name.toLowerCase(); });\n```\n\n### delIndex(name)\n\nDelete index with given `name`.\n\n```javascript\nfilter.delIndex('name');\n```\n\n### hasIndex(name)\n\nDoes index `name` exists.\n\n```javascript\nfilter.delIndex('name');\n```\n\n### addRecords(data)\n\nAdd one or more values to the filter data\n\n```javascript\nfilter.addRecords([{object1}, {object2}, etc...]);\n```\n\n### delRecords(filters)\n\nDelete records based on given filter, see `get` for more details about filters\n\n```javascript\n// delete row with id \"foobar\"\nfilter.delRecords({ id: \"foobar\" });\n// delete all data\nfilter.delRecords();\n```\n\n### get\n\nGet records from the filter\n\n```javascript\n// add an index on name and age, and feed lots of lines containing value\nvar filter = new Filter(data);\nfilter.addIndex('name', function (value) { return value.name.toLowerCase(); });\nfilter.addIndex('age', function (value) { return value.age; });\n\n// get all people that are 20 years old, sort by name\nfilter.get({ age: 20 }, ['name']);\n\n// filters also support comparison operators (<, >, >= or <=) for numbers\n// for example get all people under 18 years old\nfilter.get({ age: '<18' });\n\n// or all the people between 20 and 30\nfilter.get({ age: [20, 30] });\n\n// or all the people whose name start by \"chris\", sorted by age\nfilter.get({ name: function (v) { return (v.indexOf('chris') === 0); } }, ['age']);\n\n```\n\n### size()\n\nGive the amount of records in the filter\n\n\n## License\n\n  MIT\n",
  "readmeFilename": "README.md",
  "_id": "simple-filter@0.0.3",
  "_from": "simple-filter@0.0.3"
}
